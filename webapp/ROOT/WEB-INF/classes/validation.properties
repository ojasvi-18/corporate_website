# The ESAPI validator does many security checks on input, such as canonicalization
# and whitelist validation. Note that all of these validation rules are applied *after*
# canonicalization. Double-encoded characters (even with different encodings involved,
# are never allowed.
#
# To use:
#
# First set up a pattern below. You can choose any name you want, prefixed by the word
# "Validation." For example:
#   Validation.Email=^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\\.[a-zA-Z]{2,4}$
# 
# Then you can validate in your code against the pattern like this:
#     ESAPI.validator().isValidInput("User Email", input, "Email", maxLength, allowNull);
# Where maxLength and allowNull are set for you needs, respectively.
#
# But note, when you use boolean variants of validation functions, you lose critical 
# canonicalization. It is preferable to use the "get" methods (which throw exceptions) and 
# and use the returned user input which is in canonical form. Consider the following:
#  
# try {
#    someObject.setEmail(ESAPI.validator().getValidInput("User Email", input, "Email", maxLength, allowNull));
#
# Unsafe Characters ' " & < > ^ ~ % # 
Validator.DefaultSafeText=^[A-Za-z0-9 \\!\\@\\$\\*\\(\\)\\-\\_\\+\\=\\[\\]\\:\\;\\,\\.\\?\\/\\|\\\n]{0,}$
Validator.DefaultSafeTextWithHash=^[A-Za-z0-9 \\!\\@\%\\$\\*\\(\\)\\-\\_\\+\\=\\[\\]\\:\\;\\,\\.\\?\\/\\|\\~\\#]{0,}$
Validator.DefaultSafeTextWithAnyText=^[A-Za-z0-9 \\!\\@\\$\\*\\(\\)\\-\\_\\+\\=\\[\\]\\:\\;\\,\\.\\?\\/\\|\\~\\#\\&\\<\\>\\%\\{\\"\\'\\^\\`\\\n]{0,}$
Validator.UnsafeXssText=^[^\\^]{0,}$
Validator.CompanyName=^[A-Za-z0-9 \\!\\%\\#\\@\\<\\*\\(\\)\\-\\_\\[\\]\\:\\;\\,\\.\\&\\>\\'\\/\\+]{0,}$
Validator.StreetName=^[A-Za-z0-9 \\#\\(\\)\\-\\;\\,\\.\\&\\/]{0,}$
Validator.Email=^[A-Za-z0-9\\.\\_\\-\\&]+@[A-Za-z0-9\\.\\-]+\\.[a-zA-Z]{2,10}$
Validator.MultiEmails=^[A-Za-z0-9\\.\\_\\-\\&]+@[A-Za-z0-9\\.\\-]+\\.[a-zA-Z]{2,10}([\\s]*[,][\\s]*[A-Za-z0-9\\.\\_\\-]+@[A-Za-z0-9\\.\\-]+\\.[a-zA-Z]{2,10})*$
Validator.Password=^[A-Za-z\\d\\W\\_]{0,}$
Validator.UserRole=^[A-Za-z0-9]{0,1}$
Validator.Integer=^[\\-\\+]{0,1}[0-9]{0,}$
Validator.PositiveInteger=^[0-9]{0,}$
Validator.Number=^[\\-\\+]{0,1}[0-9]{0,}[\\.]{0,1}[0-9]{0,}$
Validator.AlphaNumeric=^[\\-\\+]{0,1}[A-Za-z0-9]{0,}$
Validator.DateTime=^[A-Za-z0-9\\:\\-\\\\\\/\\,\\s]{0,}$
Validator.InputCheckbox=^[A-Za-z]{0,10}$
Validator.AlphaWithSpace=^[A-Za-z ]{0,}$
Validator.URL=^(ht|f)tp(s?)\\:\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*(:(0-9)*)*(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\:\\'\\/\\\\\\+=&amp;%\\$#_]*)?$
Validator.Base64Text=^[A-Za-z0-9\\+\\/\\=\\,]{0,}$
Validator.Json=^[A-Za-z0-9\\:\\{\\}\\"\\,\\.\\[\\]\\/]{0,}$

Validator.IPAddress=^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
Validator.CreditCard=^(\\d{4}[- ]?){3}\\d{4}$
